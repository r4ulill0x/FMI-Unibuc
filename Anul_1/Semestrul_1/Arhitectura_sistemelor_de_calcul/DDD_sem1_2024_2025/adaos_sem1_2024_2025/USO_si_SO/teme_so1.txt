1. Procese si thread-uri:
-------------------------

1. Scrieti un program care implementeaza un shell cu urmatoarele
 functionalitati:
 - accepta comanda interna 'exit';
 - accepta comenzi externe de forma 'com arg1 arg2 ...', unde 'com'
  este un nume de comanda sau un specificator de fisier executabil
  iar fiecare argument 'arg_n' poate fi:
  - un cuvant format din caractere ne-albe diferite de '(' si ')';
  - o constructie de forma '(com arg1 arg2 ...)', unde
   'com arg1 arg2 ...' este ca mai sus; asadar, linia de comanda
   poate contine '()' imbricate;
  de fiecare data cand un argument 'arg_n' este de forma '(com arg1 arg2 ...)',
  el va fi inlocuit in linia de comanda cu output-ul comenzii 'com arg1 arg2 ...',
  din care se vor elimina capetele de linie '\n'.
 Se va lucra doar in C, fara a se apela direct sau indirect la shell-ul din sistem.
 Exemplu de functionare:
 $./myshell
 > echo abc def (echo 123 456 (pwd) 789)
 abc def 123 456 /home/dragulici/Desktop/work 789
 > exit
 $

2. Scrieti un program de talk intre mai multe persoane (procese), prin
 intermediul unui fisier regular accesat in comun. Fiecare persoana va folosi
 un proces care ruleaza programul de talk si care va primi fisierul respectiv
 ca argument in linia de comanda. Daca fisierul nu exista, procesul il va
 crea ca fisier nou (corespunde unui grup de conversatie nou). Fisiserul va
 fi gestionat a.i. sa contina informatii auxiliare despre numarul curent de
 procese conectate, procesul curent (PID, UID), zona din fisier folosita
 pentru comunicare, etc..
  Pentru operare eficienta si asigurarea excluziunii mutuale, fiecare
 proces isi va mapa intern fisierul cu 'mmap()' si va bloca accesul la el
 cu 'fcntl()'.
  Comunicarea va fi in mod linie; fiecare proces citeste si transmite linii
 de text in timp real; pentru liniile primite se va afisa PID-ul si
 username-ul proprietarului expeditorului; procesele se pot conecta/deconecta
 la un grup de conversatie in timpul sesiunii de conversatie si atunci in
 fisierul respectiv se vor actualza informatiile necesare iar participantii
 existenti vor primi si vor afisa notificari automate; ultimul proces
 deconectat va sterge automat fisierul.

3. Scrieti un program 'copy' care se va lansa sub forma:
     copy   f1 ... fn    f
 (unde 'f1', ..., 'fn', 'f' sunt fisiere) si care are ca efect crearea sau
 suprascrierea fisierului 'f' a.i. sa contina concatenarea fisierelor
 'f1', ..., 'fn'; daca n = 1, se copiaza 'f1' in 'f'.
   Programul isi va mapa cu 'mmap()' fisierul 'f' in memorie si va folosi
 biblioteca 'Pthreads' pentru a genera n thread-uri paralele care vor copia
 fiecare cate un fisier 'fi' in zona corespunzatoare din 'f'. In final, va
 astepta terminarea thread-urilor si se va termina.

4. Scrieti un program care sorteaza prin interclasare un fisier
 de caractere in maniera descrisa mai jos.
  Sortarea prin interclasare presupune impartirea sirului in doua jumatati,
 sortarea fiecarei parti prin aceeasi metoda (deci recursiv), apoi 
 interclasarea celor doua parti (care sunt acum sortate).
  Programul va lucra astfel: imparte sirul in doua, genereaza doua
 thread-uri, folosind biblioteca 'Pthreads', care sorteaza cele doua
 jumatati in paralel, apoi asteapta sa se termine thread-urile, apoi
 interclaseaza jumatatile; fiecare thread va proceda similar, generand
 (daca e cazul) alte doua thread-uri.
  Nu se vor folosi fisiere auxiliare iar memoria folosita va fi limitata de
 o constanta.
 
5. Scrieti un program care genereaza prin backtracking recursiv permutarile
 multimii {1,...,n} (n dat in linia de comanda), in asa fel incat de fiecare
 data cand se completeaza o pozitie, pentru a genera toate continuarile
 posibile nu se intra in apel recursiv ci se lanseaza un thread, folosind
 biblioteca 'Pthreads', care genereaza aceste continuari; nu se va astepta
 terminarea thread-ului pentru a incerca o alta valoare pentru pozitia
 curenta si astfel vectorii sunt construiti in paralel. In momentul cand
 un thread gaseste o permutare, o scrie intr-un tub anonim, urmata de un '\n'
 iar din tubul anonim citeste si afisaza pe ecran, in paralel, procesul
 initial. Putem presupune ca informatia scrisa de un thread in tub este
 suficient de mica (<= PIPE_BUF octeti) a.i. scrierea sa fie atomica si
 astfel riscul ca permutarile sa se amestece este eliminat; alternativ,
 scrierea in tub poate fi protejata de un mutex. Atat procesul initial
 cat si orice thread nu se termina decat dupa ce i s-au terminat toate
 thread-urile pe care le-a generat el.

6. Scrieti un program care creaza 9 thread-uri, fiecare dintre acestea
 executand o bucla infinita in care asteapta un timp aleator intre 1 si
 5 secunde, apoi isi afisaza pe ecran numarul (de la 1 la 9). Pe thread-ul
 principal se citesc cifre de la tastatura. Atunci cand se introduce cifra
 corespunzatoare unui thread, acesta va fi anulat. DupÄƒ ce s-au inchis
 toate cele 9 thread-uri (trebuie sa se si astepte terminarea lor), se va
 inchide si thread-ul principal.



2. Sincronizare:
----------------

1. Scrieti un program care numara aparitiile unui sir de caractere
 ca subcuvant in alt sir de caractere (cele doua siruri sunt date ca
 argumente in linia de comanda). De fiecare data cand se verifica daca
 primul sir apare ca subcuvant incepand de pe o pozitie, verificarea
 se va face de catre un thread generat folosind biblioteca 'Pthreads'
 si nu se va astepta terminarea thread-ului pentru a initia o cautare
 incepand de la o alta pozitie - astfel verificarile au loc in paralel.
 Fiecare thread va furniza informatia apare/nu apare ca subcuvant
 de la pozitia respectiva adunand 1/0 la o variabila globala protejata
 de un mutex. Dupa initierea tuturor cautarilor, procesul initial va
 asteapta sa i se termine toate thread-urile si va afisa valoarea
 variabilei.

2. Scrieti un program care numara aparitiile unui numar intr-un vector
 (numarul si elementele vectorului sunt date ca argumente in linia de
 comanda) printr-o strategie de tip divide et impera: se imparte vectorul
 in doua, apoi se initiaza cate un thread, folosind biblioteca 'Pthreads',
 care cauta numarul in fiecare jumatate, in aceeasi maniera (fiecare
 thread va genera, daca e cazul, alte doua thread-uri); cele doua
 thread-uri se desfasoara in paralel. Fiecare thread va furniza ca
 informatie numarul de aparitii, adunand acest numar la o variabila
 globala protejata de un mutex. Procesul initial va afisa numarul total
 obtinut. Atat procesul cat si orice thread generat nu se vor termina
 decat dupa ce se vor termina toate thread-urile generate de el.

3. Scrieti un program pentru inmultirea a doua matrici din/in zone
 partajate, cu thread-uri 'Pthreads' paralele, cate unul per coloana
 a primei matrici factor (procesul initial afisaza rezultatul). Deci,
 daca trebuie calculat A * B = C, threadul k parcurge toate combinatiile
 valide i,j si aduna elementul aik * bkj la cij. Pozitiile in matricea
 rezultat vor fi protejate prin mutex-uri de scrierea simultana.

4. Scrieti un program pentru talk intre mai multe persoane, folosind
 instrumente IPC Sistem V: zona de comunicare va fi un segment de
 memorie partajata iar accesul in excluziunea mutuala se va proteja
 prin vectori de semafoare. Fiecare participant va lansa un acelasi
 program ca un proces separat, indicand camera de discutie (segmentul
 de memorie partajata) ca argument in linia de comanda.

5. Scrieti un program pentru talk intre mai multe persoane, folosind
 doar vectori de semafoare IPC Sistem V. Prin semafoare se va realiza
 si trimiterea codului caracterului si asteptarea. Fiecare participant
 va lansa un acelasi program ca un proces separat, indicand camera de
 discutie (cheia externa a vectorului de semafoare) ca argument in linia
 de comanda.

6. Scrieti un program pentru talk intre mai multe persoane, folosind
 doar cozi de mesaje IPC Sistem V. Fiecare participant va lansa un acelasi
 program ca un proces separat, indicand camera de discutie (cheia externa
 cozii de mesaje) ca argument in linia de comanda.

7. Scrieti un program care primeste ca argumente in linia de comanda
 trei numere naturale n, c si k, 1 <= k, 0 <= c <= 9, si determina
 cate cifre c se gasesc in total in toate numerele de la 0 la n, folosind
 thread-uri 'Pthreads' paralele. Fiecare thread analizeaza un numar i.
 Procesul initial genereaza cate un thread pentru fiecare numar 0 <= i <= n,
 a.i. thread-urile sa se desfasuare paralel. Procesul initial va afisa
 numarul total de cifre si numarul total de thread-uri aparute (a se vedea
 in continuare) si nu se va termina decat dupa ce se vor termina toate
 aceste thread-uri.
   In general, un thread care analizeaza un numar i, lucreaza astfel:
 - daca i are <= k cifre (i este < 10 la puterea k), atunci in mod repetat
  consulta si apoi elimina ultima cifra din i (cu operatii de tip "div 10"
  si "mod 10"), pana i devine 0; numarul de cifre c detectate va fi adunat
  la o variabila globala protejata de un mutex.
 - daca i are > k cifre, atunci in mod repetat extrage ultimile k cifre
  din i (cu operatii "div 10 la k", "mod 10 la k") si transmite numarul
  format unui nou thread, pana i devine 0 (ultima portiune poate avea
  < k cifre); thread-urile generate astfel se vor desfasura in paralel;
 - fiecare thread, odata pornit, va incrementa un contor global, protejat
  de un mutex, care va permite procesului initial sa determine cate
  thread-uri au fost in total.

8. Implementati o functie de tip bariera, folosind cozi de mesaje IPC
  System V. Folositi aceasta functie intr-o aplicatie multiproces sau
  multithread (folosibd biblioteca 'Pthreads') care calculeaza puterea n
  a unei matrici in n pasi, folosind procese / thread-uri paralele,
  fiecare operand asupra cate unei linii a matricii sursa de la pasul n
  si folosind bariera pentru sincronizarea proceselor / thread-urilor la
  sfarsitul pasului.


3. Interfata ncurses:
---------------------

1. Scrieti un joc de tip breakout: intr-o fereastra, la baza se deplaseaza
 stanga/dreapta (prin sageti) o paleta, iar deasupra se afla niste caramizi; 
 o minge se deplaseaza automat, ricosand in paleta, pereti, caramizi; daca
 atinge o caramida, caramida dispare si se puncteaza; numarul de puncte
 curent este aifsat/actualizat in permanenta intr-un colt; daca mingea atinge
 baza ferestrei, dispare si se pierde jocul; jocul incepe cu mingea pe
 paleta, la apasarea unei taste; jocul se incheie la pierderea mingii, la
 disparitia tuturor caramizilor sau la apasarea unei taste dedicate.

2. Scrieti un editor de text in mod pagina, cu urmatoarele functionalitati
 (invocate prin combinatii de taste):
- introducere caracter, introducere cap de linie (trecere la rand nou),
 stergere caracter/cap de linie curent (delete), stergere caracter/cap de
 linie anterior (backspace);
- comutare mod inserare/suprascriere (insert);
- deplasare in pagina (sageti, Home, End, PgDn, PgUp);
- marcare/demarcare (Shift-sageti); blocul apare colorat diferit;
- copy/cut/paste bloc marcat (Ctrl-C/Ctrl-X/Ctrl-V);
- save (Ctrl-S), quit (Ctrl-Q).
 Editorul lucreaza cu un singur fisier odata, fisierul este dat ca argument
  in linia de comanda.

3. Scrieti un editor de text in mod pagina, cu urmatoarele functionalitati:
- operare in pagina prin combinatii de taste: inserare/stergere caracter/cap
 de linie, deplasare (sageti), marcare inceput/sfarsit bloc (Ctrl-B/Ctrl-E,
 blocul apare colorat diferit, demarcarea se face punand sfarsit <= inceput);
- meniu File cu comenzile: New, Load, Save, Save As, Close, Quit;
- meniu Edit cu comenzile: Copy, Cut, Paste, Del (pentru blocul curent).
 Meniurile/comenzile din meniu se pot accesa cu combinatii de taste si mouse.
 Editorul lucreaza cu un singur fisier odata.

4. Scrieti un editor de text in mod pagina, cu urmatoarele functionalitati:
- lucrul cu mai multe fisiere odata, in tab-uri diferite;
- comutare intre tab-uri, cu combinatii de taste si mouse.
- meniu File cu comenzile: New (creaza tab nou), Load (incarca alt fisier in
 tab-ul curent), Save (se refera la tab-ul curent), Save As (se refera la
 tab-ul curent), Close (elimina tab-ul curent), Quit; meniul/comenzile din
 meniu se pot accesa cu combinatii de taste si mouse;
- operare in tab-ul curent prin combinatii de taste: inserare/stergere
 caracter/cap de linie, deplasare (sageti).

5. Scrieti un IDE generic, cu urmatoarele facilitati:
- se lucreaza cu un singur fisier sursa odata;
- ferestre separate, care se pot deschide/inchide/redimensiona pentru:
 editare cod, afisare erori (capteaza stderr-ul compilatorului),
 input/output interactiv la rularea programului (pot fi si ferestre
 separate, conectate prin tuburi la stdin/stdout-ul programului);
- meniu cu comenzi pentru: Load fisier sursa, Save fisier sursa, Quit,
 Build, Run, specificare compilator (linia de comanda a compilarii),
 deschis/inchis ferestre;
- editare sursa prin combinatii de taste: inserare/stergere caracter/cap
 de linie, deplasare (sageti).

6. Scrieti un file commander (gen midnight commander, 'mc'), cu urmatoarele
 functionalitati (invocate prin combinatii de taste):
- se poate lucra cu un numar oarecare de directoare, specificate ca argumente
 in lina de comanda; fiecare director este afisat intr-un panou separat;
 exista un panou curent si cate un obiect (fisier, director) curent in fiecare
 panou; panoul curent/obiectul curent din panou sunt afisate diferit;
- schimbare panou curent (sageti dreapta/stanga);
- schimbare obiect curent in panoul curent (sageti sus/jos);
- trecerea in director copil/parinte (Enter);
- vizualizare fisier regular curent (F3);
- copiere fisier regular curent in panoul urmator (se considera o ordine
 circulara a panourilor); optional, se poate implementa o comanda de
 schimbare a ordinii panourilor;
- stergere obiect (fisier/director) curent;
- redenumire obiect (fisier/director) curent (noul nume se cere cu o caseta).

7. Implementati un joc de dame, care se poate juca in doi, de la aceeasi
 tastatura / mouse: pe o tabla de sah 8x8 fiecare jucator are 8 piese, 
 de culoarea cu care joaca, aflate pe patratele negre ale primelor doua
 randuri din dreptul lui; jucatorii muta alternativ; la o mutare, o piesa
 proprie se poate deplasa in diagonala inainte, pe un patrat negru vecin
 liber, sau poate sari in diagonala o piesa adversa invecinata, daca
 dincolo de ea e un patrat (negru) liber, iar cu ocazia asta captureaza
 piesa adversa; piesa cu care a capturat poate captura in continuare
 alte piese, in acelasi tur, daca este posibil; pierde jucatorul care
 nu mai are piese sau nu mai poate muta.
  Piesele se vor muta cu mouse-ul, programul va verifica corectitudinea
 mutarilor (nu va permite mutari incorecte), va detecta si va afisa victoria.
  Varianta de implementare: pozitiile se aleg cu taste-sageti iar piesa
 se alege cu TAB (deci, fara mouse).

8. Implementati un joc in doi de tip X si 0, care se poate juca de la o
 aceeasi tastaura / mouse: pe o tabla 3x3 fiecare jucator plaseaza alternativ
 semnul sau, X sau 0; cine reuseste primul sa completeze o linie, coloana
 sau diagonala, castiga; jocul se poate termina remiza.
   Bifarea pozitiilor se poate face doar cu mouse-ul. Programul va verifica
 corectitudinea actiunilor (nu va permite actiuni incorecte), va detecta si
 va afisa cine este la rand, victoria sau remiza.

9. Implementati un joc de tip tetris: intr-un recipient dreptunghiular cad
 piese de diverse forme; piesele cad automat iar in timpul caderii se pot
 deplasa dreapta - stanga sau se pot roti, prin combinatii de taste; caderea
 se opreste atunci cand o zona plina s-ar suprapune cu alta zona plina;
 daca prin imbinarea pieselor cazute se formeaza o linie de zone pline pe
 toata latimea recipientului, linia se sterge si se puncteaza iar ce e
 deasupra isi continua caderea, cu aceleasi conditii; cand recipientul
 se umple suficient a.i. o noua piesa sa nu mai poata cadea, jocul se termina.
   Vor fi disponibile cel putin 4 tipuri de piese, scorul curent se va afisa
 intr-un colt.


4. Scripting bash: TODO
------------------


5. Probleme mixte:
------------------

1. Implementati un joc de tancuri care se poate juca in doi, la o aceeasi
 tastatura. Tancurile sunt caractere-litera (care identifica jucatorul),
 trag cu caractere-punct si se deplaseaza pe o tabla care contine si ziduri
 (labirint); tancul se poate deplasa de la tastatura sus, jos, dreapta,
 stanga; proiectilul e tras la comanda, in directia de deplasare a
 tancului; proiectilul se deplaseaza animat pe tabla pana loveste un tanc,
 un zid sau marginea tablei; daca loveste un tanc, i se scade din viata
 (vietile sunt afisate in colturi); jucatorul care ajunge cu viata la 0
 pierde.
   Tabla va fi implementata ca o matrice de pozitii alocata intr-un segnment
 de memorie partajata; fiecare jucator va opera pe tabla respectiva cu un
 proces propriu - jocul tanc este lansat de un jucator lansand un acelasi
 program, caruia i se dau ca argumente in linia de comanda tabla, litera
 jucatorului, comenzile de deplasare si foc; pozitiile pe tabla sunt protejate
 de accesarea simultana prin semafoare. Interfata va fi ncurses.

2. Implementati un joc al vietii in felul urmator:
 - pe o tabla 100x100 (matrice alocata intr-un segment de memorie partajata
  si avand celulele protejate prin semafoare de scrierea concurenta de catre
  mai multe procese) exista plante, animale ierbivore, animale carnivore,
  animalele fiind pe sexe M/F; fiecare nou participant ia fiinta ca un proces
  separat care acceseaza tabla si are un simbol litera plasat inpozitia sa
  curenta P (planta), I (ierbivor M), i (ierbovor F), C (carnivor M),
  c (carnivor F); fiecare participant are o energie initiala E: la P
  este 100, la I sau i este 40, la C sau c este 60; i si c au o gestatie G,
  initial -1; P nu se deplaseaza, restul se pot deplasa.
 - jocul evoleaza in etape, la fiecare etapa fiecare participant face o
  activitate specifica:
  P: E scade cu 1 iar daca a ajuns la 0 moare (dispare); E poate scadea si
       mai repede, daca in vecinatate este un ierbivor;
     o data la 10 etape isi creaza un copil, intr-o pozitie invecinata libera
       (daca exista);
  I: E scade cu 1 iar daca a ajuns la 0 moare (dispare);
     daca adiacent este un P, E creste cu 2 iar lui P E ii scade cu (inca) 1;
     daca E > 15 si adiacent este un i, E scade cu 5 iar lui i G ii devine 20;
     daca E < 10, se depleseaza cu 1x1 spre cel mai apropiat P dintr-o
       zona invecinata 10x10 (daca nu este deja adiacent cu un P si doar daca
       se poate determina unic un asemenea P);
     daca E > 20, se deplaseaza cu 1x1 spre cel mai apropiat i dintr-o
       zona invecinata 10x10 (daca nu este deja adiacent cu un i si doar daca
       poate determina unic un asemenea i);
  i: E scade cu 1 iar daca a ajuns la 0 moare (dispare);
     daca adiacent este un P, E creste cu 2 iar lui P E ii scade cu (inca) 1;
     daca E < 10, se deplaseaza cu 1x1 spre cel mai apropiat P dintr-o
       zona invecinata 10x10 (daca nu este deja adiacent cu un P si doar daca
       poate determina unic un asemenea P);
     daca G este 0, genereaza un copil I sau i intr-o zona libera invecinata
       (daca exista) iar G devine -1;
  C: E scade cu 1 iar daca a ajuns la 0 moare (dispare);
     daca adiacent este un I sau i, E creste cu E acelui I/i iar lui I/i E
       ii devine 0 (moare);
     daca E > 15 si adiacent este un c, E scade cu 5 iar lui c G ii devine 20;
     daca E < 20, se depleseaza cu 1x1 spre cel mai apropiat I/i dintr-o
       zona invecinata 10x10 (doar daca poate determina unic un asemenea I/i);
     daca E > 30, se deplaseaza cu 1x1 spre cel mai apropiat c dintr-o
       zona invecinata 10x10 (daca nu este deja adiacent cu un c si doar daca
       poate determina unic un asemenea c);
  c: E scade cu 1 iar daca a ajuns la 0 moare (dispare);
     daca adiacent este un I sau i, E creste cu E acelui I/i iar lui I/i E
       ii devine 0 (moare);
     daca E < 20, se deplaseaza cu 1x1 spre cel mai apropiat I/i dintr-o
       zona invecinata 10x10 (doar daca poate determina unic un asemenea I/i);
     daca G este 0, genereaza un copil C sau c intr-o zona libera invecinata
       (daca exista) iar G devine -1.
  Jocul vietii se termina atunci cand tabla este goala sau raman doar plante.
  Valorile numerice de mai sus se pot ajusta pentru a obtine efecte mai
   spectaculoase.
  Interfata va fi ncurses.

